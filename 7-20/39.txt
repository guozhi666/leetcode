/*
给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]
示例 2:

输入: candidates = [2,3,5], target = 8,
所求解集为:
[
  [2,2,2,2],
  [2,3,3],
  [3,5]
]

*/


class Solution {
public:
    void dfs(vector<int>& candidates, int target, vector<vector<int>> &re, vector<int> &temp, int sum, int level){
        if (sum > target)  return;//减支
        if (sum == target) {
            re.push_back(temp);
            return;
        }
 
        for (int i=level; i<candidates.size();/*避免出现重复元素，减支*/ ++i){
                temp.push_back(candidates[i]);
                dfs(candidates, target, re, temp, sum + candidates[i], i);
                temp.pop_back();
        }
    }
    
        vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());//排序，方便后来减支
        vector<vector<int>> re;
        vector<int> temp;
        dfs(candidates, target, re, temp, 0, 0);
        return re;
    }
};

